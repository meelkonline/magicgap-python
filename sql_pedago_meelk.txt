CREATE TABLE addresses (
  id BIGINT PRIMARY KEY,
  addressable_type VARCHAR(255),
  addressable_id BIGINT,
  street_number VARCHAR(255),
  street_name VARCHAR(255),
  complement VARCHAR(255),
  postal_code VARCHAR(255),
  latitude DOUBLE,
  longitude DOUBLE,
  city VARCHAR(255),
  country_id BIGINT
);

CREATE TABLE enrollments (
  id BIGINT PRIMARY KEY,
  enrollmentable_type VARCHAR(255),
  enrollmentable_id BIGINT,
  order_id BIGINT,
  user_id BIGINT,
  company_id BIGINT,
  creator_id BIGINT,
  pack_id BIGINT,
  presence TINYINT,
  status ENUM('requested', 'active', 'cancelled', 'completed', 'deleted'),
  created_at TIMESTAMP,
  updated_at TIMESTAMP
);

CREATE TABLE entities (
  id BIGINT PRIMARY KEY,
  modelable_type VARCHAR(255),
  modelable_id BIGINT,
  type VARCHAR(255),
  capital VARCHAR(255),
  reg_number VARCHAR(255),
  tax_number VARCHAR(255),
  code VARCHAR(255),
  name VARCHAR(255)
);

CREATE TABLE offer_descriptions (
  id BIGINT PRIMARY KEY,
  describable_type VARCHAR(255),
  describable_id BIGINT,
  reference VARCHAR(255),
  code VARCHAR(255),
  max_learners SMALLINT,
  name JSON,
  objectives JSON,
  program JSON,
  pre_requisite JSON,
  pedago JSON,
  public JSON,
  eval JSON,
  equipment JSON,
  promo_message JSON,
  learner_message JSON,
  internal_comment TEXT,
  psh_accessibility JSON,
  video JSON,
  pre_requisite_quiz TINYINT,
  intra TINYINT,
  pack_only TINYINT
);

CREATE TABLE packables (
  id BIGINT PRIMARY KEY,
  pack_id BIGINT,
  packable_type VARCHAR(255),
  packable_id BIGINT,
  position SMALLINT
);

CREATE TABLE prices (
  id BIGINT PRIMARY KEY,
  price_level_id BIGINT,
  priceable_type VARCHAR(255),
  priceable_id BIGINT,
  price_ht DOUBLE,
  price_ttc DOUBLE,
  deposit TINYINT,
  deposit_ht DOUBLE,
  deposit_ttc DOUBLE,
  tax_rate DOUBLE,
  vat_amount BIGINT,
  charge DOUBLE,
  type ENUM('default', 'forfeit'),
  options JSON,
  created_at TIMESTAMP,
  updated_at TIMESTAMP
);

CREATE TABLE taggables (
  tag_id BIGINT,
  taggable_type VARCHAR(255),
  taggable_id BIGINT
);

CREATE TABLE tags (
  id BIGINT PRIMARY KEY,
  name LONGTEXT,
  slug LONGTEXT,
  type VARCHAR(255),
  order_column INT,
  created_at TIMESTAMP,
  updated_at TIMESTAMP
);


CREATE TABLE certificates (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  enrollment_id BIGINT UNSIGNED NOT NULL,
  date DATETIME NOT NULL,
  place VARCHAR(255) NOT NULL,
  name VARCHAR(255) NOT NULL,
  score BIGINT UNSIGNED DEFAULT NULL,
  code VARCHAR(255) NOT NULL,
  created_at TIMESTAMP NULL DEFAULT NULL,
  updated_at TIMESTAMP NULL DEFAULT NULL
);

CREATE TABLE classrooms (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  of_id BIGINT UNSIGNED NOT NULL,
  name LONGTEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL CHECK (json_valid(name)),
  max_learners INT DEFAULT NULL,
  pmr TINYINT NOT NULL DEFAULT 0,
  status ENUM('active', 'inactive', 'deleted') NOT NULL,
  created_at TIMESTAMP NULL DEFAULT NULL,
  updated_at TIMESTAMP NULL DEFAULT NULL
);

CREATE TABLE companies (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  status ENUM('active', 'deleted') NOT NULL,
  created_at TIMESTAMP NULL DEFAULT NULL,
  updated_at TIMESTAMP NULL DEFAULT NULL
);

CREATE TABLE company_card (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  company_id BIGINT UNSIGNED DEFAULT NULL,
  number VARCHAR(255) DEFAULT NULL,
  date_start DATE DEFAULT NULL,
  date_end DATE DEFAULT NULL
);

CREATE TABLE countries (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  name LONGTEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL CHECK (json_valid(name)),
  code VARCHAR(255) NOT NULL
);

CREATE TABLE courses (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  of_id BIGINT UNSIGNED NOT NULL,
  type ENUM('elearning', 'virtual', 'physical') NOT NULL,
  duration MEDIUMINT NOT NULL,
  status ENUM('active', 'inactive', 'deleted') NOT NULL,
  created_at TIMESTAMP NULL DEFAULT NULL,
  updated_at TIMESTAMP NULL DEFAULT NULL
);

CREATE TABLE course_indicator (
  course_id BIGINT UNSIGNED DEFAULT NULL,
  indicator_id BIGINT UNSIGNED NOT NULL,
  value INT DEFAULT NULL
);

CREATE TABLE indicators (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  objective BIGINT UNSIGNED NOT NULL,
  name LONGTEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL CHECK (json_valid(name)),
  unit LONGTEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL CHECK (json_valid(unit)),
  created_at TIMESTAMP NULL DEFAULT NULL,
  updated_at TIMESTAMP NULL DEFAULT NULL
);

CREATE TABLE ofs (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  agreement_number VARCHAR(255) DEFAULT NULL,
  agreement_provider VARCHAR(255) DEFAULT NULL,
  cancellation_period INT NOT NULL DEFAULT 15,
  custom_quiz TINYINT NOT NULL DEFAULT 1,
  ics_number VARCHAR(255) DEFAULT NULL,
  charge_percent INT NOT NULL DEFAULT 5,
  status ENUM('active', 'deleted') NOT NULL,
  created_at TIMESTAMP NULL DEFAULT NULL,
  updated_at TIMESTAMP NULL DEFAULT NULL
);

CREATE TABLE packs (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  of_id BIGINT UNSIGNED NOT NULL,
  type ENUM('pack', 'blended') NOT NULL,
  locked TINYINT NOT NULL DEFAULT 0,
  status ENUM('active', 'inactive', 'deleted') NOT NULL,
  created_at TIMESTAMP NULL DEFAULT NULL,
  updated_at TIMESTAMP NULL DEFAULT NULL
);

CREATE TABLE profiles (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  user_id BIGINT UNSIGNED NOT NULL,
  title ENUM('male', 'female', 'neutral') NOT NULL,
  first_name VARCHAR(255) DEFAULT NULL,
  last_name VARCHAR(255) DEFAULT NULL,
  phone_1 VARCHAR(255) DEFAULT NULL,
  phone_2 VARCHAR(255) DEFAULT NULL,
  birth_date DATE DEFAULT NULL,
  birth_zipcode VARCHAR(255) DEFAULT NULL,
  birth_country_id BIGINT UNSIGNED DEFAULT NULL,
  created_at DATETIME NOT NULL,
  updated_at DATETIME NOT NULL
);

CREATE TABLE sessions (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  course_id BIGINT UNSIGNED NOT NULL,
  classroom_id BIGINT UNSIGNED DEFAULT NULL,
  cost DOUBLE(8,2) NOT NULL DEFAULT 0.00,
  validated TINYINT NOT NULL DEFAULT 0,
  status ENUM('active', 'inactive', 'cancelled', 'confirmed', 'deleted') NOT NULL,
  reminded TINYINT NOT NULL DEFAULT 0,
  first_validated_at DATETIME DEFAULT NULL,
  validated_at DATETIME DEFAULT NULL,
  cancelled_at DATETIME DEFAULT NULL,
  created_at TIMESTAMP NULL DEFAULT NULL,
  updated_at TIMESTAMP NULL DEFAULT NULL
);

CREATE TABLE session_days (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  session_id BIGINT UNSIGNED NOT NULL,
  date DATE NOT NULL,
  am_start TIME DEFAULT NULL,
  am_end TIME DEFAULT NULL,
  pm_start TIME DEFAULT NULL,
  pm_end TIME DEFAULT NULL,
  description LONGTEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL CHECK (json_valid(description))
);

CREATE TABLE session_trainer (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  session_id BIGINT UNSIGNED NOT NULL,
  trainer_id BIGINT UNSIGNED NOT NULL,
  via_of VARCHAR(255) DEFAULT NULL
);

CREATE TABLE trainer_descriptions (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  trainer_id BIGINT UNSIGNED DEFAULT NULL,
  cv LONGTEXT CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL CHECK (json_valid(cv)),
  is_person TINYINT NOT NULL DEFAULT 1
);

CREATE TABLE users (
  id BIGINT PRIMARY KEY AUTO_INCREMENT,
  email VARCHAR(255) NOT NULL,
  google_id VARCHAR(255) DEFAULT NULL,
  email_verified_at TIMESTAMP NULL DEFAULT NULL,
  password VARCHAR(255) DEFAULT NULL,
  last_seen TIMESTAMP NULL DEFAULT NULL,
  remember_token VARCHAR(100) DEFAULT NULL,
  created_at TIMESTAMP NULL DEFAULT NULL,
  updated_at TIMESTAMP NULL DEFAULT NULL
);

-- Note: The 'addresses' table is polymorphic, with 'addressable_id' and 'addressable_type'.
-- The 'addressable_type' contains the full namespace, e.g., 'App\\\Models\\\User' or 'App\\\Models\\\Company'.
-- Example: SELECT addresses.street_name FROM addresses WHERE addresses.addressable_type = 'App\\\Models\\\Classroom' AND addresses.addressable_id = 1;
-- Example: SELECT c.name FROM classrooms c JOIN addresses a ON c.id = a.addressable_id ANd a.addressable_type = 'App\\\Models\\\Classroom' WHERE a.postal_code = '06110' ORDER BY c.name;

-- Note: The 'enrollments' table is polymorphic, with 'enrollmentable_id' and 'enrollmentable_type'.
-- The 'enrollmentable_type' contains the full namespace, e.g., 'App\\\Models\\\Course' or 'App\\\Models\\\Session'.
-- Example: SELECT enrollments.status FROM enrollments WHERE enrollments.enrollmentable_type = 'App\\\Models\\\Course' AND enrollments.enrollmentable_id = 1;

-- Note: The 'entities' table is polymorphic, with 'modelable_id' and 'modelable_type'.
-- The 'modelable_type' contains the full namespace, e.g., 'App\\\Models\\\User' or 'App\\\Models\\\Company'.
-- Example: SELECT entities.name FROM entities WHERE entities.modelable_type = 'App\\\Models\\\Company' AND entities.modelable_id = 1;

-- Note: The 'offer_descriptions' table is polymorphic, with 'describable_id' and 'describable_type'.
-- The 'describable_type' contains the full namespace, e.g., 'App\\\Models\\\Course' or 'App\\\Models\\\Pack'.
-- Example: SELECT offer_descriptions.name FROM offer_descriptions WHERE offer_descriptions.describable_type = 'App\\\Models\\\Course' AND offer_descriptions.describable_id = 1;

-- Note: The 'packables' table is polymorphic, with 'packable_id' and 'packable_type'.
-- The 'packable_type' contains the full namespace, e.g., 'App\\\Models\\\Course' or 'App\\\Models\\\Session'.
-- Example: SELECT packables.position FROM packables WHERE packables.packable_type = 'App\\\Models\\\Course' AND packables.packable_id = 1;

-- Note: The 'prices' table is polymorphic, with 'priceable_id' and 'priceable_type'.
-- The 'priceable_type' contains the full namespace, e.g., 'App\\\Models\\\Course' or 'App\\\Models\\\Session'.
-- Example: SELECT prices.price_ht FROM prices WHERE prices.priceable_type = 'App\\\Models\\\Course' AND prices.priceable_id = 1;

-- Note: The 'taggables' table is polymorphic, with 'taggable_id' and 'taggable_type'.
-- The 'taggable_type' contains the full namespace, e.g., 'App\\\Models\\\Course' or 'App\\\Models\\\Session'.
-- Example: SELECT taggables.tag_id FROM taggables WHERE taggables.taggable_type = 'App\\\Models\\\Course' AND taggables.taggable_id = 1;

-- classrooms.of_id can be joined with ofs.id
-- courses.of_id can be joined with ofs.id
-- course_indicator.course_id can be joined with courses.id
-- course_indicator.indicator_id can be joined with indicators.id
-- model_has_course_indicator.enrollment_id can be joined with enrollments.id
-- model_has_course_indicator.indicator_id can be joined with indicators.id
-- packs.of_id can be joined with ofs.id
-- profiles.birth_country_id can be joined with countries.id
-- profiles.user_id can be joined with users.id
-- sessions.classroom_id can be joined with classrooms.id
-- sessions.course_id can be joined with courses.id
-- session_days.session_id can be joined with sessions.id
-- session_trainer.session_id can be joined with sessions.id
-- session_trainer.trainer_id can be joined with users.id
-- trainer_descriptions.trainer_id can be joined with users.id